@using System.Reflection.Emit
@using GameLogic
@using Microsoft.AspNetCore.Components.Web
@using Shared.Components

@if (Scenario != null)
{
    <div class="drawer">


        @foreach (var processName in Scenario.Processes.Keys)
        {
            var process = Scenario.Processes[processName];

            <div @key="@processName">
                <label>@processName</label>
                <div class="window">
                    <h4>CPU Activity</h4>
                    <div class="window-body">
                        <CpuLogDisplay Log="@process.CpuLog">

                        </CpuLogDisplay>
                    </div>
                </div>
                <div class="window my-4">
                    <h4>Memory Contents</h4>
                    <div class="window-body mt-2">
                        <AddressableRegionTable Region="@process.Memory">

                        </AddressableRegionTable>
                    </div>
                </div>
            </div>
        }


        @for (int i = 0; i < Scenario.Disks.Count; i++)
        {
            var driveNumber = i;
            var readonlyTitle = Scenario.Disks[i].ReadOnly ? "READONLY" : "READWRITE";
            var showReadonlyView = !Scenario.Disks[i].IsExternalDrive || Scenario.Disks[i].IsMounted;
            <div class="window" @key="@driveNumber">
                @if (showReadonlyView)
                {

                    <h2>Drive @i:&nbsp;@Scenario.Disks[i].VolumeName, @readonlyTitle</h2>
                    <div class="window-body mt-2">
                        <AddressableRegionTable Region="@Scenario.Disks[driveNumber]" />
                    </div>
                }
                else
                {
                    <h2>Drive @driveNumber: {NOT ATTACHED}</h2>
                    <div class="window-body jumbotron">
                        <AddressableRegionTable Region="@Scenario.Disks[driveNumber]" @ref="EditRegion" />
                    </div>

                }
            </div>

            @if (Scenario.Disks[driveNumber].IsExternalDrive)
            {
                if (Scenario.Disks[driveNumber].IsMounted)
                {
                    <button class="btn btn-secondary my-2" @onclick="@(() => Detach(driveNumber))">Detach Drive</button>
                }
                else
                {
                    <button class="btn btn-secondary my-2" @onclick="@(() => Attach(driveNumber))">Attach Drive</button>
                }
            }
        }



        <hr class="mt-4" />
        <HintReveal Hints="@Scenario.Hints"></HintReveal>

        <hr class="my-4" />
        @*<WinAmp/>*@


    </div>
}



@code {

    [Parameter]
    public Scenario Scenario { get; set; }

    private AddressableRegionTable EditRegion { get; set; }

    private void Detach(int i)
    {
        Console.WriteLine("Dettaching: " + i);

        this.Scenario.Disks[i].IsMounted = false;
        this.StateHasChanged();
    }

    private void Attach(int i)
    {
        Console.WriteLine("Attaching: " + i);

        EditRegion.ApplyChanges();

        this.Scenario.Disks[i].IsMounted = true;
        this.StateHasChanged();
    }


}
