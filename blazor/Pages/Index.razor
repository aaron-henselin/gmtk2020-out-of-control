@page "/{package}"
@using System.Net.Http
@using GameLogic
@using Microsoft.AspNetCore.Components.Web
@inherits gmtk2020_blazor.IndexBase
@using gmtk2020_blazor.Helpers
@using gmtk2020_blazor.Shared.Components
@using Shared.Components

@if (Scenario != null)
{
    <CascadingValue Value="@this">
        <WinBanner />
    </CascadingValue>

    <div class="px-4">

        <OperatingSystemDrawer Scenario="@Scenario"></OperatingSystemDrawer>

        <div class="viewport">
            @*
            <h1>(Out of) Control Flow</h1>
            <p>
                The goal of the game is to subvert the expected control flow of a program
                by tampering with the contents of memory. It is based on the real-life
                buffer overrun threats that have plagued computer science since 1972.
            </p>
            *@

            <h3>@Scenario.Title</h3>
            <p>
                @foreach (var line in Scenario.DescriptionLines)
                {
                    @line
                }
                @Scenario.WinCondition.Description
            </p>

            <CascadingValue Value="@this">
                <TerminalViewport Scenario="@Scenario">
                    <KeyboardEntry LaunchAction="@(x => this.Launch(x))"></KeyboardEntry>
                </TerminalViewport>
            </CascadingValue>

            <PrinterOutputDisplay Printer="@Scenario.Printer"
                                  WinCondition="@Scenario.WinCondition.Description"></PrinterOutputDisplay>



        </div>
    </div>


}


@code {

    [Parameter]
    public string Package { get; set; }

    protected override async Task OnParametersSetAsync()
    {
       

        var packageToGrab = Package ?? "1_hello_world";
        Console.WriteLine($"grabbing '{packageToGrab}'.");

        var package = await PackageDownloader.Download(packageToGrab);
        Console.WriteLine($"downloaded '{packageToGrab}'.");

        this.Scenario = new HelloWorldScenario(package);
        Console.WriteLine($"scenario ready");

        await base.OnParametersSetAsync();
    }



}
